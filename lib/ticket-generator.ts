import PDFDocument from "pdfkit"
import QRCode from "qrcode"

interface TicketData {
  eventTitle: string
  eventDate: string
  eventVenue: string
  attendeeName: string
  attendeeEmail: string
  ticketId: string
}

export async function generateTicketPDF(ticketData: TicketData): Promise<Buffer> {
  return new Promise<Buffer>(async (resolve, reject) => {
    try {
      // Create PDF without specifying fonts to avoid font file issues
      const doc = new PDFDocument({
        size: "A4",
        margin: 50,
        info: {
          Title: `Ticket - ${ticketData.eventTitle}`,
          Author: "TechClub",
          Subject: "Event Ticket",
        },
      })
      const chunks: Buffer[] = []

      doc.on("data", (chunk) => chunks.push(chunk))
      doc.on("end", () => resolve(Buffer.concat(chunks)))
      doc.on("error", reject)

      // Header with background
      doc.rect(0, 0, doc.page.width, 80).fill("#2563eb")

      // Title in white
      doc.fillColor("white").fontSize(24).text("TechClub Event Ticket", 50, 25, { align: "center" })

      // Reset color and move down
      doc.fillColor("black")
      doc.y = 120

      // Event details box
      doc.rect(50, 120, 495, 180).fillAndStroke("#f8fafc", "#e2e8f0")

      doc.fontSize(18).text(ticketData.eventTitle, 70, 140, { width: 455, align: "center" })

      doc
        .fontSize(12)
        .text(`Date: ${ticketData.eventDate}`, 70, 180)
        .text(`Venue: ${ticketData.eventVenue}`, 70, 200)
        .text(`Time: Please check event details`, 70, 220)

      // Attendee details box
      doc.rect(50, 320, 495, 100).fillAndStroke("#fef3c7", "#f59e0b")

      doc
        .fillColor("#92400e")
        .fontSize(14)
        .text("Attendee Information", 70, 340)
        .fontSize(11)
        .text(`Name: ${ticketData.attendeeName}`, 70, 365)
        .text(`Email: ${ticketData.attendeeEmail}`, 70, 385)

      // QR Code section
      try {
        const qrCodeData = JSON.stringify({
          ticketId: ticketData.ticketId,
          event: ticketData.eventTitle,
          attendee: ticketData.attendeeName,
          date: ticketData.eventDate,
        })

        const qrCodeBuffer = await QRCode.toBuffer(qrCodeData, {
          width: 100,
          margin: 1,
          color: {
            dark: "#000000",
            light: "#ffffff",
          },
        })

        doc.image(qrCodeBuffer, 450, 450, { width: 100, height: 100 })

        doc.fillColor("#6b7280").fontSize(9).text("Scan for verification", 450, 560, { width: 100, align: "center" })
      } catch (qrError) {
        console.warn("QR code generation failed:", qrError)
        doc
          .fillColor("#6b7280")
          .fontSize(10)
          .text(`Ticket ID: ${ticketData.ticketId}`, 450, 500, { width: 100, align: "center" })
      }

      // Instructions
      doc
        .fillColor("#374151")
        .fontSize(10)
        .text("Instructions:", 70, 480)
        .fontSize(9)
        .text("• Please arrive 15 minutes before the event", 70, 500)
        .text("• Bring a valid ID for verification", 70, 515)
        .text("• This ticket is non-transferable", 70, 530)

      // Footer
      doc
        .fillColor("#9ca3af")
        .fontSize(8)
        .text("Generated by TechClub Management System", 50, 650, {
          width: 495,
          align: "center",
        })
        .text(`Generated on: ${new Date().toLocaleString()}`, 50, 665, {
          width: 495,
          align: "center",
        })

      // Ticket border
      doc.rect(40, 40, 515, 650).stroke("#2563eb")

      doc.end()
    } catch (error) {
      console.error("PDF generation error:", error)
      reject(error)
    }
  })
}
